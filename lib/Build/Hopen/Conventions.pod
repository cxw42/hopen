=head1 NAME

Build::Hopen::Conventions - conventions for using hopen(1) as a build system

=head1 SYNOPSIS

L<Build::Hopen> is a flexible dataflow processor and task runner.  However, its main
use case is as a build system, e.g., a Makefile generator.  To stay as flexible as
possible, hopen(1) expects its components to follow these conventions.

=head2 Components used by the build system

=over

=item A project directory

Where the main C<.hopen.pl> file of the project is.

=item A destination directory

Where the output will go.  hopen(1) does not support in-source builds.
The default directory is C<< <project dir>/built >>.

=item A generator

A subclass of L<Build::Hopen::Gen> that creates the build-system files.

=item A toolchain (optional)

A subclass of L<Build::Hopen::Toolchain> that applies any compiler-specific
options that are independent of the generator.

=item An architecture (optional)

An arbitrary string understood by the toolchain or generator.  Used, e.g.,
to select x86 vs. x64.

=item Hopen file(s)

One or more files matching C<.hopen.pl> or C<*.hopen.pl>.  See L</HOPEN FILES>
for details.

The filename C<MY.hopen.pl> is reserved.  It is created by hopen in each
destination directory to record the state of the build in that directory.

=back

=head1 HOPEN FILES

Each hopen file is the body of a subroutine that returns a hashref.  That
hashref is provided as input to the build graph.  Each hopen file's output
hashref is appended to the input hashref.  Therefore, to leave the input
unchanged, return C<undef>, not C<$_[0]>.

Elements of the hashref starting with C<__R> are reserved.  Please don't read
or write those elements if you want hopen to work! :)

Each hopen file runs in an environment with L<Build::Hopen::Base> and
everything from L<Build::Hopen> loaded.

=head2 Variables usable in hopen files

=over

=item $Generator

The current L<Build::Hopen::Gen> instance.

=item $Toolchain

The current L<Build::Hopen::Toolchain> instance.

=item $Build

The L<Build::Hopen::G::DAG> instance representing the current build.
Goals in C<$Build> will become, e.g., top-level targets of a
generated C<Makefile>.

=back

